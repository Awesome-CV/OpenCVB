<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>CPP_Class - new C++</Title>
        </Header>
        <Snippet>
            <Code Language="VB">
                <![CDATA[
Imports cv = OpenCvSharp
Imports System.Runtime.InteropServices

Module Anyname_CPP_Module
    <DllImport(("CPP_Classes.dll"), CallingConvention:=CallingConvention.Cdecl)>
    Public Function Anyname_Open() As IntPtr
    End Function
    <DllImport(("CPP_Classes.dll"), CallingConvention:=CallingConvention.Cdecl)>
    Public Sub Anyname_Close(anynamePtr As IntPtr)
    End Sub
    <DllImport(("CPP_Classes.dll"), CallingConvention:=CallingConvention.Cdecl)>
    Public Function Anyname_Run(anynamePtr As IntPtr, rgbPtr As IntPtr, rows As Int32, cols As Int32, channels As Int32) As IntPtr
    End Function
End Module

'//// Cut and paste this code to a module in the "CPP_Classes" project for the C++ interface.
'//#include <cstdlib>
'//#include <cstdio>
'//#include <iostream>
'//#include <algorithm>
'//#include <opencv2/core.hpp>
'//#include <opencv2/imgproc.hpp>
'//#include <opencv2/highgui.hpp>

'//using namespace std;
'//using namespace cv;
'//class anyname
'//{
'//private:
'//public:
'//    Mat src, dst;
'//    anyname(){}
'//    void Run() {
'//        dst = src.clone();
'//    }
'//};

'//extern "C" __declspec(dllexport)
'//anyname *Anyname_Open() {
'//    anyname *anynamePtr = new anyname();
'//    return anynamePtr;
'//}

'//extern "C" __declspec(dllexport)
'//void Anyname_Close(anyname *anynamePtr)
'//{
'//    delete anynamePtr;
'//}

'//extern "C" __declspec(dllexport)
'//int *Anyname_Run(anyname *anynamePtr, int *rgbPtr, int rows, int cols, int channels)
'//{
'//    anynamePtr->src = Mat(rows, cols, (channels == 3) ? CV_8UC3 : CV_8UC1, rgbPtr);
'//	   anynamePtr->Run();
'//    return (int *) anynamePtr->dst.data; // return this C++ allocated data to managed code
'//}

Public Class AnyName_CPP : Implements IDisposable
    Dim anyname As IntPtr
    Public Sub New(ocvb As AlgorithmData)
        anyname = Anyname_Open()
        ocvb.desc = "description of class"
	End Sub
    Public Sub Run(ocvb As AlgorithmData)
        Dim src = ocvb.color
        Dim srcData(src.Total * src.ElemSize) As Byte
        Marshal.Copy(src.Data, srcData, 0, srcData.Length - 1)
        Dim handleSrc = GCHandle.Alloc(srcData, GCHandleType.Pinned)
        Dim imagePtr = Anyname_Run(anyname, handleSrc.AddrOfPinnedObject(), src.Rows, src.Cols, src.Channels)
        handleSrc.Free()

        If imagePtr <> 0 Then
            Dim dstData(src.Total * src.ElemSize - 1) As Byte
            Marshal.Copy(imagePtr, dstData, 0, dstData.Length)
            ocvb.result1 = New cv.Mat(src.Rows, src.Cols, IIf(src.Channels = 3, cv.MatType.CV_8UC3, cv.MatType.CV_8UC1), dstData)
        End If
    End Sub
    Public Sub Dispose() Implements IDisposable.Dispose
        Anyname_Close(anyname)
    End Sub
End Class
]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>